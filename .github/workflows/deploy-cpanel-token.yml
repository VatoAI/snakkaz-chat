name: Deploy Snakkaz Chat via cPanel API Token

# Run when code is pushed to main branch or manually triggered
on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        continue-on-error: false
      
      # Verify that required secrets exist
      - name: Validate required secrets
        env:
          SUPABASE_URL_CHECK: ${{ secrets.SUPABASE_URL != '' }}
          SUPABASE_KEY_CHECK: ${{ secrets.SUPABASE_ANON_KEY != '' }}
          CPANEL_USER_CHECK: ${{ secrets.CPANEL_USERNAME != '' }}
          CPANEL_TOKEN_CHECK: ${{ secrets.CPANEL_API_TOKEN != '' }}
          CPANEL_DOMAIN_CHECK: ${{ secrets.CPANEL_DOMAIN != '' }}
          EMAIL_CONFIG_CHECK: ${{ secrets.ENABLE_PREMIUM_EMAIL != '' }}
        run: |
          if [[ "$SUPABASE_URL_CHECK" != "true" ]]; then
            echo "Error: SUPABASE_URL secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$SUPABASE_KEY_CHECK" != "true" ]]; then
            echo "Error: SUPABASE_ANON_KEY secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$CPANEL_USER_CHECK" != "true" ]]; then
            echo "Error: CPANEL_USERNAME secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$CPANEL_TOKEN_CHECK" != "true" ]]; then
            echo "Error: CPANEL_API_TOKEN secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$CPANEL_DOMAIN_CHECK" != "true" ]]; then
            echo "Error: CPANEL_DOMAIN secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$EMAIL_CONFIG_CHECK" != "true" ]]; then
            echo "Error: ENABLE_PREMIUM_EMAIL secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$missing_secrets" == "true" ]]; then
            echo "Missing required secrets. Cannot proceed with deployment."
            exit 1
          fi
          
          echo "All required secrets are available."
        
      # Check that the API security layer is in place
      - name: Verify security implementation
        run: |
          echo "Verifying API security implementation..."
          
          if [ ! -f "src/middleware/apiSecurityMiddleware.js" ]; then
            echo "❌ ERROR: API security layer is missing!"
            echo "The apiSecurityMiddleware.js file must be present for secure cPanel API access"
            exit 1
          fi
          
          if ! grep -q "isOperationPermitted" "src/server/emailService.js"; then
            echo "❌ ERROR: Email service is not using the secure API wrapper!"
            echo "Make sure emailService.js implements the security checks"
            exit 1
          fi
          
          echo "✅ API security layer verification passed"
        
      - name: Build project
        run: |
          echo "Starting build process with required environment variables"
          npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          VITE_APP_URL: 'https://www.snakkaz.com'
          VITE_API_ENDPOINT: 'https://api.snakkaz.com'
          VITE_APP_ENV: 'production'
          VITE_BUILD_TIME: ${{ github.run_id }}
          
      - name: Add .htaccess file
        run: |
          cat > dist/.htaccess << EOF
          # Force HTTPS
          RewriteEngine On
          RewriteCond %{HTTPS} off
          RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
          
          # Handle SPA routing by redirecting to index.html
          <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteBase /
            RewriteRule ^index\.html$ - [L]
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{REQUEST_FILENAME} !-d
            # Don't rewrite PHP files - let them execute normally
            RewriteCond %{REQUEST_URI} !\.php$
            RewriteRule . /index.html [L]
          </IfModule>
          
          # Set correct MIME types
          <IfModule mod_mime.c>
            AddType text/css .css
            AddType text/javascript .js
            AddType application/javascript .mjs
            AddType application/json .json
            AddType image/svg+xml .svg
            AddType image/x-icon .ico
            AddType application/font-woff .woff
            AddType application/font-woff2 .woff2
            AddType application/vnd.ms-fontobject .eot
            AddType application/x-font-ttf .ttf
          </IfModule>
          
          # Enable CORS
          <IfModule mod_headers.c>
            Header set Access-Control-Allow-Origin "*"
          </IfModule>
          EOF
      
      - name: Validate build output
        run: |
          if [ ! -f "dist/index.html" ]; then
            echo "Error: Build failed, index.html not found in dist folder"
            exit 1
          fi
          echo "Build validation successful"
      
      # Step 1: Deploy .htaccess file first via cPanel API with token
      - name: Deploy .htaccess via cPanel API Token
        id: deploy-htaccess
        run: |
          echo "Uploading .htaccess file via cPanel API Token..."
          
          # Test API token connection
          echo "Testing cPanel API token connection..."
          TEST_RESPONSE=$(curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                         "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/list_files?dir=/public_html")
          
          if echo "$TEST_RESPONSE" | grep -q "error"; then
            echo "❌ API token test failed!"
            echo "Error: $(echo "$TEST_RESPONSE" | grep -o '\"error\":\"[^\"]*\"')"
            echo "htaccess_success=false" >> $GITHUB_ENV
          else
            echo "✅ API token test successful!"
            
            # Upload .htaccess file
            HTACCESS_RESPONSE=$(curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                             -F "dir=/public_html" \
                             -F "file=@dist/.htaccess" \
                             -F "overwrite=1" \
                             "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/upload_files")
            
            if echo "$HTACCESS_RESPONSE" | grep -q "errors"; then
              echo "❌ .htaccess file upload failed!"
              echo "Error: $(echo "$HTACCESS_RESPONSE" | grep -o '\"errors\":\[[^\]]*\]')"
              echo "htaccess_success=false" >> $GITHUB_ENV
            else
              echo "✅ .htaccess uploaded successfully!"
              echo "htaccess_success=true" >> $GITHUB_ENV
            fi
          fi
      
      # Step 2: Create a ZIP file of the dist directory
      - name: Create ZIP archive of the dist directory
        run: |
          echo "Creating ZIP archive of the dist directory..."
          cd dist
          zip -r ../snakkaz-dist.zip .
          cd ..
          echo "ZIP archive created: snakkaz-dist.zip"
      
      # Step 3: Upload the ZIP file via cPanel API with token
      - name: Upload ZIP via cPanel API Token
        id: deploy-zip
        run: |
          echo "Uploading ZIP file via cPanel API Token..."
          
          ZIP_RESPONSE=$(curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                      -F "dir=/public_html" \
                      -F "file=@snakkaz-dist.zip" \
                      -F "overwrite=1" \
                      "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/upload_files")
          
          if echo "$ZIP_RESPONSE" | grep -q "errors"; then
            echo "❌ ZIP file upload failed!"
            echo "Error: $(echo "$ZIP_RESPONSE" | grep -o '\"errors\":\[[^\]]*\]')"
            echo "zip_upload_success=false" >> $GITHUB_ENV
          else
            echo "✅ ZIP file uploaded successfully!"
            echo "zip_upload_success=true" >> $GITHUB_ENV
          fi
      
      # Step 4: Execute extraction via cPanel API (bypassing PHP execution issues)
      - name: Execute extraction via cPanel API
        if: env.zip_upload_success == 'true'
        run: |
          echo "Performing extraction via cPanel API (bypassing server PHP issues)..."
          
          # First, let's try the correct cPanel API format for file extraction
          # Using proper parameter format and GET request for extraction
          EXTRACT_RESPONSE=$(curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                          "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/extract_files?dir=/public_html&file=snakkaz-dist.zip&type=zip")
          
          echo "cPanel API Response: $EXTRACT_RESPONSE"
          
          # Check if extraction was successful
          if [[ "$EXTRACT_RESPONSE" == *'"status":1'* ]] || [[ "$EXTRACT_RESPONSE" == *'"errors":null'* ]]; then
            echo "✅ Extraction successful via cPanel API!"
            echo "extraction_success=true" >> $GITHUB_ENV
            
            # Clean up the ZIP file after successful extraction
            echo "Cleaning up ZIP file..."
            DELETE_RESPONSE=$(curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                            "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/delete_files?dir=/public_html&file=snakkaz-dist.zip")
            
            if [[ "$DELETE_RESPONSE" == *'"status":1'* ]] || [[ "$DELETE_RESPONSE" == *'"errors":null'* ]]; then
              echo "✅ ZIP file cleaned up successfully"
            else
              echo "⚠️ ZIP file cleanup may have failed, but deployment succeeded"
            fi
            
            echo "DEPLOYMENT COMPLETE"
          else
            echo "❌ Primary extraction method failed, trying alternative approach..."
            
            # Fallback: Try using compress_files API in reverse (decompress mode)
            ALT_EXTRACT_RESPONSE=$(curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                                "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Compress/extract_files?dir=/public_html&file=snakkaz-dist.zip&type=zip")
            
            echo "Alternative API Response: $ALT_EXTRACT_RESPONSE"
            
            if [[ "$ALT_EXTRACT_RESPONSE" == *'"status":1'* ]] || [[ "$ALT_EXTRACT_RESPONSE" == *'"errors":null'* ]]; then
              echo "✅ Alternative extraction method successful!"
              echo "extraction_success=true" >> $GITHUB_ENV
              
              # Clean up the ZIP file
              DELETE_RESPONSE=$(curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                              "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/delete_files?dir=/public_html&file=snakkaz-dist.zip")
              
              echo "DEPLOYMENT COMPLETE via alternative method"
            else
              echo "❌ Both extraction methods failed"
              echo "extraction_success=false" >> $GITHUB_ENV
              echo "Manual extraction required: snakkaz-dist.zip uploaded to /public_html"
              echo ""
              echo "📋 Manual steps to complete deployment:"
              echo "1. Log into cPanel File Manager"
              echo "2. Navigate to /public_html"
              echo "3. Right-click on snakkaz-dist.zip"
              echo "4. Select 'Extract' from the context menu"
              echo "5. Choose 'Extract to current directory'"
              echo "6. Delete the snakkaz-dist.zip file after extraction"
            fi
          fi
      
      # Step 5: Verify deployment success
      - name: Verify deployment
        if: env.extraction_success == 'true'
        run: |
          echo "Verifying deployment by checking if site is accessible..."
          
          # Wait a moment for files to propagate
          sleep 10
          
          # Test if the main site loads
          SITE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://www.snakkaz.com/ || echo "000")
          
          if [[ "$SITE_RESPONSE" == "200" ]]; then
            echo "✅ Site is accessible and returning HTTP 200"
            echo "deployment_verified=true" >> $GITHUB_ENV
          else
            echo "⚠️ Site returned HTTP $SITE_RESPONSE - may need DNS propagation time"
            echo "deployment_verified=false" >> $GITHUB_ENV
          fi
      
      # Create a detailed deployment summary
      - name: Add deployment summary with diagnostics
        if: always()
        run: |
          echo "# 📊 cPanel Deployment Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://www.snakkaz.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # .htaccess upload status
          if [[ "${{ env.htaccess_success }}" == "true" ]]; then
            echo "### ✅ .htaccess File" >> $GITHUB_STEP_SUMMARY
            echo ".htaccess file uploaded successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ .htaccess File" >> $GITHUB_STEP_SUMMARY
            echo ".htaccess file upload failed." >> $GITHUB_STEP_SUMMARY
          fi
          
          # ZIP upload status
          if [[ "${{ env.zip_upload_success }}" == "true" ]]; then
            echo "### ✅ Application ZIP" >> $GITHUB_STEP_SUMMARY
            echo "Application ZIP file uploaded successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Application ZIP" >> $GITHUB_STEP_SUMMARY
            echo "Application ZIP file upload failed." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Extraction execution status
          if [[ "${{ env.extraction_success }}" == "true" ]]; then
            echo "### ✅ Extraction Process" >> $GITHUB_STEP_SUMMARY
            echo "Files extracted successfully via cPanel API." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Extraction Process" >> $GITHUB_STEP_SUMMARY
            echo "File extraction via cPanel API failed." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Site verification status
          if [[ "${{ env.deployment_verified }}" == "true" ]]; then
            echo "### ✅ Site Verification" >> $GITHUB_STEP_SUMMARY
            echo "Site is accessible and returning HTTP 200." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ env.deployment_verified }}" == "false" ]]; then
            echo "### ⚠️ Site Verification" >> $GITHUB_STEP_SUMMARY
            echo "Site verification failed or incomplete - may need time for propagation." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⏳ Site Verification" >> $GITHUB_STEP_SUMMARY
            echo "Site verification skipped (extraction failed)." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Post-Deployment Actions" >> $GITHUB_STEP_SUMMARY
          echo "1. **Verify Clean References**: Check that cdn.gpteng.co references are removed" >> $GITHUB_STEP_SUMMARY
          echo "2. **Test Site Loading**: Visit https://www.snakkaz.com and verify it loads" >> $GITHUB_STEP_SUMMARY
          echo "3. **Check CSP Headers**: Ensure Content Security Policy is working correctly" >> $GITHUB_STEP_SUMMARY
          echo "4. **Test Navigation**: Verify SPA routing works properly" >> $GITHUB_STEP_SUMMARY
          echo "5. **Check Console**: Look for any remaining external CDN errors" >> $GITHUB_STEP_SUMMARY
