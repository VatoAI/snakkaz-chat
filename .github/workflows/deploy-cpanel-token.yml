name: Deploy Snakkaz Chat via cPanel API Token

# Run when code is pushed to main branch or manually triggered
on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        continue-on-error: false
      
      # Verify that required secrets exist
      - name: Validate required secrets
        env:
          SUPABASE_URL_CHECK: ${{ secrets.SUPABASE_URL != '' }}
          SUPABASE_KEY_CHECK: ${{ secrets.SUPABASE_ANON_KEY != '' }}
          CPANEL_USER_CHECK: ${{ secrets.CPANEL_USERNAME != '' }}
          CPANEL_TOKEN_CHECK: ${{ secrets.CPANEL_API_TOKEN != '' }}
          CPANEL_DOMAIN_CHECK: ${{ secrets.CPANEL_DOMAIN != '' }}
          EMAIL_CONFIG_CHECK: ${{ secrets.ENABLE_PREMIUM_EMAIL != '' }}
        run: |
          if [[ "$SUPABASE_URL_CHECK" != "true" ]]; then
            echo "Error: SUPABASE_URL secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$SUPABASE_KEY_CHECK" != "true" ]]; then
            echo "Error: SUPABASE_ANON_KEY secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$CPANEL_USER_CHECK" != "true" ]]; then
            echo "Error: CPANEL_USERNAME secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$CPANEL_TOKEN_CHECK" != "true" ]]; then
            echo "Error: CPANEL_API_TOKEN secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$CPANEL_DOMAIN_CHECK" != "true" ]]; then
            echo "Error: CPANEL_DOMAIN secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$EMAIL_CONFIG_CHECK" != "true" ]]; then
            echo "Error: ENABLE_PREMIUM_EMAIL secret is missing"
            missing_secrets=true
          fi
          
          if [[ "$missing_secrets" == "true" ]]; then
            echo "Missing required secrets. Cannot proceed with deployment."
            exit 1
          fi
          
          echo "All required secrets are available."
        
      # Check that the API security layer is in place
      - name: Verify security implementation
        run: |
          echo "Verifying API security implementation..."
          
          if [ ! -f "src/middleware/apiSecurityMiddleware.js" ]; then
            echo "❌ ERROR: API security layer is missing!"
            echo "The apiSecurityMiddleware.js file must be present for secure cPanel API access"
            exit 1
          fi
          
          if ! grep -q "isOperationPermitted" "src/server/emailService.js"; then
            echo "❌ ERROR: Email service is not using the secure API wrapper!"
            echo "Make sure emailService.js implements the security checks"
            exit 1
          fi
          
          echo "✅ API security layer verification passed"
        
      - name: Build project
        run: |
          echo "Starting build process with required environment variables"
          npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          VITE_APP_URL: 'https://www.snakkaz.com'
          VITE_API_ENDPOINT: 'https://api.snakkaz.com'
          VITE_APP_ENV: 'production'
          VITE_BUILD_TIME: ${{ github.run_id }}
          
      - name: Add .htaccess file
        run: |
          cat > dist/.htaccess << EOF
          # Force HTTPS
          RewriteEngine On
          RewriteCond %{HTTPS} off
          RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
          
          # Handle SPA routing by redirecting to index.html
          <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteBase /
            RewriteRule ^index\.html$ - [L]
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{REQUEST_FILENAME} !-d
            # Don't rewrite PHP files - let them execute normally
            RewriteCond %{REQUEST_URI} !\.php$
            RewriteRule . /index.html [L]
          </IfModule>
          
          # Set correct MIME types
          <IfModule mod_mime.c>
            AddType text/css .css
            AddType text/javascript .js
            AddType application/javascript .mjs
            AddType application/json .json
            AddType image/svg+xml .svg
            AddType image/x-icon .ico
            AddType application/font-woff .woff
            AddType application/font-woff2 .woff2
            AddType application/vnd.ms-fontobject .eot
            AddType application/x-font-ttf .ttf
          </IfModule>
          
          # Enable CORS
          <IfModule mod_headers.c>
            Header set Access-Control-Allow-Origin "*"
          </IfModule>
          EOF
      
      - name: Validate build output
        run: |
          if [ ! -f "dist/index.html" ]; then
            echo "Error: Build failed, index.html not found in dist folder"
            exit 1
          fi
          echo "Build validation successful"
      
      # Step 1: Deploy .htaccess file first via cPanel API with token
      - name: Deploy .htaccess via cPanel API Token
        id: deploy-htaccess
        run: |
          echo "Uploading .htaccess file via cPanel API Token..."
          
          # Test API token connection
          echo "Testing cPanel API token connection..."
          TEST_RESPONSE=$(curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                         "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/list_files?dir=/public_html")
          
          if echo "$TEST_RESPONSE" | grep -q "error"; then
            echo "❌ API token test failed!"
            echo "Error: $(echo "$TEST_RESPONSE" | grep -o '\"error\":\"[^\"]*\"')"
            echo "htaccess_success=false" >> $GITHUB_ENV
          else
            echo "✅ API token test successful!"
            
            # Upload .htaccess file
            HTACCESS_RESPONSE=$(curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                             -F "dir=/public_html" \
                             -F "file=@dist/.htaccess" \
                             -F "overwrite=1" \
                             "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/upload_files")
            
            if echo "$HTACCESS_RESPONSE" | grep -q "errors"; then
              echo "❌ .htaccess file upload failed!"
              echo "Error: $(echo "$HTACCESS_RESPONSE" | grep -o '\"errors\":\[[^\]]*\]')"
              echo "htaccess_success=false" >> $GITHUB_ENV
            else
              echo "✅ .htaccess uploaded successfully!"
              echo "htaccess_success=true" >> $GITHUB_ENV
            fi
          fi
      
      # Step 2: Create a ZIP file of the dist directory
      - name: Create ZIP archive of the dist directory
        run: |
          echo "Creating ZIP archive of the dist directory..."
          cd dist
          zip -r ../snakkaz-dist.zip .
          cd ..
          echo "ZIP archive created: snakkaz-dist.zip"
      
      # Step 3: Upload the ZIP file via cPanel API with token
      - name: Upload ZIP via cPanel API Token
        id: deploy-zip
        run: |
          echo "Uploading ZIP file via cPanel API Token..."
          
          ZIP_RESPONSE=$(curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                      -F "dir=/public_html" \
                      -F "file=@snakkaz-dist.zip" \
                      -F "overwrite=1" \
                      "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/upload_files")
          
          if echo "$ZIP_RESPONSE" | grep -q "errors"; then
            echo "❌ ZIP file upload failed!"
            echo "Error: $(echo "$ZIP_RESPONSE" | grep -o '\"errors\":\[[^\]]*\]')"
            echo "zip_upload_success=false" >> $GITHUB_ENV
          else
            echo "✅ ZIP file uploaded successfully!"
            echo "zip_upload_success=true" >> $GITHUB_ENV
          fi
      
      # Step 4: Execute extraction via multiple cPanel API approaches
      - name: Execute extraction via cPanel API with comprehensive fallbacks
        if: env.zip_upload_success == 'true'
        run: |
          echo "🔄 Attempting extraction via multiple cPanel API methods..."
          
          # Debug: Show exact API calls being made
          echo "Debug Info:"
          echo "- Domain: ${{ secrets.CPANEL_DOMAIN }}"
          echo "- Username: ${{ secrets.CPANEL_USERNAME }}"
          echo "- File: snakkaz-dist.zip"
          echo "- Target: /public_html"
          
          # Method 1: Files API (newer cPanel versions)
          echo ""
          echo "🔄 Method 1: Files API extract_files..."
          EXTRACT1_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" \
                            -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                            "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Files/extract_files?dir=/public_html&file=snakkaz-dist.zip&type=zip")
          
          echo "Files API Response: $EXTRACT1_RESPONSE"
          HTTP_CODE1=$(echo "$EXTRACT1_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
          API_RESPONSE1=$(echo "$EXTRACT1_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
          
          if [[ "$HTTP_CODE1" == "200" ]] && [[ "$API_RESPONSE1" == *'"status":1'* ]]; then
            echo "✅ Method 1 successful!"
            echo "extraction_success=true" >> $GITHUB_ENV
            echo "extraction_method=Files_API" >> $GITHUB_ENV
          else
            echo "❌ Method 1 failed (HTTP: $HTTP_CODE1)"
            
            # Method 2: Fileman API (traditional)
            echo ""
            echo "🔄 Method 2: Fileman API extract_files..."
            EXTRACT2_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" \
                              -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                              "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/extract_files?dir=/public_html&file=snakkaz-dist.zip&type=zip")
            
            echo "Fileman API Response: $EXTRACT2_RESPONSE"
            HTTP_CODE2=$(echo "$EXTRACT2_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
            API_RESPONSE2=$(echo "$EXTRACT2_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
            
            if [[ "$HTTP_CODE2" == "200" ]] && [[ "$API_RESPONSE2" == *'"status":1'* ]]; then
              echo "✅ Method 2 successful!"
              echo "extraction_success=true" >> $GITHUB_ENV
              echo "extraction_method=Fileman_API" >> $GITHUB_ENV
            else
              echo "❌ Method 2 failed (HTTP: $HTTP_CODE2)"
              
              # Method 3: Compress API
              echo ""
              echo "🔄 Method 3: Compress API extract_files..."
              EXTRACT3_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" \
                                -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                                "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Compress/extract_files?dir=/public_html&file=snakkaz-dist.zip&type=zip")
              
              echo "Compress API Response: $EXTRACT3_RESPONSE"
              HTTP_CODE3=$(echo "$EXTRACT3_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
              API_RESPONSE3=$(echo "$EXTRACT3_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
              
              if [[ "$HTTP_CODE3" == "200" ]] && [[ "$API_RESPONSE3" == *'"status":1'* ]]; then
                echo "✅ Method 3 successful!"
                echo "extraction_success=true" >> $GITHUB_ENV
                echo "extraction_method=Compress_API" >> $GITHUB_ENV
              else
                echo "❌ Method 3 failed (HTTP: $HTTP_CODE3)"
                
                # Method 4: Create and upload PHP extraction script
                echo ""
                echo "🔄 Method 4: Upload PHP extraction script..."
                
                # Create PHP extraction script
                cat > extract_deployment.php << 'EOFPHP'
          <?php
          set_time_limit(300);
          $zipFile = '/home/${{ secrets.CPANEL_USERNAME }}/public_html/snakkaz-dist.zip';
          $extractTo = '/home/${{ secrets.CPANEL_USERNAME }}/public_html/';
          
          if (!file_exists($zipFile)) {
              die(json_encode(['status' => 'error', 'message' => 'ZIP file not found']));
          }
          
          $zip = new ZipArchive;
          $result = $zip->open($zipFile);
          
          if ($result === TRUE) {
              $zip->extractTo($extractTo);
              $zip->close();
              unlink($zipFile); // Delete ZIP after extraction
              echo json_encode(['status' => 'success', 'message' => 'Extraction completed']);
          } else {
              echo json_encode(['status' => 'error', 'message' => 'Cannot open ZIP file', 'code' => $result]);
          }
          ?>
          EOFPHP
                
                # Upload PHP script
                PHP_UPLOAD_RESPONSE=$(curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                                    -F "dir=/public_html" \
                                    -F "file=@extract_deployment.php" \
                                    -F "overwrite=1" \
                                    "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/upload_files")
                
                if echo "$PHP_UPLOAD_RESPONSE" | grep -q '"status":1'; then
                  echo "✅ PHP script uploaded, executing..."
                  
                  # Execute PHP script
                  sleep 3
                  PHP_EXEC_RESPONSE=$(curl -s "https://www.snakkaz.com/extract_deployment.php")
                  echo "PHP Script Response: $PHP_EXEC_RESPONSE"
                  
                  if echo "$PHP_EXEC_RESPONSE" | grep -q '"status":"success"'; then
                    echo "✅ Method 4 successful via PHP script!"
                    echo "extraction_success=true" >> $GITHUB_ENV
                    echo "extraction_method=PHP_Script" >> $GITHUB_ENV
                    
                    # Clean up PHP script
                    curl -s -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
                         "https://${{ secrets.CPANEL_DOMAIN }}:2083/execute/Fileman/delete_files?dir=/public_html&file=extract_deployment.php"
                  else
                    echo "❌ Method 4 failed"
                    echo "extraction_success=false" >> $GITHUB_ENV
                  fi
                else
                  echo "❌ Could not upload PHP script"
                  echo "extraction_success=false" >> $GITHUB_ENV
                fi
              fi
            fi
          fi
          
          # Clean up local PHP script
          rm -f extract_deployment.php
          
          # Final status
          if [[ "${{ env.extraction_success }}" != "true" ]]; then
            echo ""
            echo "❌ All extraction methods failed"
            echo "Manual extraction required: snakkaz-dist.zip uploaded to /public_html"
            echo ""
            echo "📋 Manual steps to complete deployment:"
            echo "1. Log into cPanel File Manager at https://${{ secrets.CPANEL_DOMAIN }}:2083"
            echo "2. Navigate to /public_html"
            echo "3. Right-click on snakkaz-dist.zip"
            echo "4. Select 'Extract' from the context menu"
            echo "5. Choose 'Extract to current directory'"
            echo "6. Delete the snakkaz-dist.zip file after extraction"
            echo "7. Verify files are deployed by visiting https://www.snakkaz.com"
          else
            echo ""
            echo "✅ DEPLOYMENT SUCCESSFUL via ${{ env.extraction_method }}"
          fi
      
      # Step 5: Verify deployment success
      - name: Verify deployment
        if: env.extraction_success == 'true'
        run: |
          echo "Verifying deployment by checking if site is accessible..."
          echo "Extraction method used: ${{ env.extraction_method }}"
          
          # Wait a moment for files to propagate
          sleep 15
          
          # Test if the main site loads
          echo "Testing site accessibility..."
          SITE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://www.snakkaz.com/ || echo "000")
          
          if [[ "$SITE_RESPONSE" == "200" ]]; then
            echo "✅ Site is accessible and returning HTTP 200"
            echo "deployment_verified=true" >> $GITHUB_ENV
            
            # Check for clean references (no Lovable/GPT Engineer CDNs)
            echo "Checking for clean references..."
            SITE_CONTENT=$(curl -s https://www.snakkaz.com/ || echo "")
            if echo "$SITE_CONTENT" | grep -q "gpteng.co\|lovable"; then
              echo "⚠️ Warning: Found Lovable/GPT Engineer references in live site"
              echo "site_clean=false" >> $GITHUB_ENV
            else
              echo "✅ Site is clean - no Lovable/GPT Engineer references found"
              echo "site_clean=true" >> $GITHUB_ENV
            fi
          else
            echo "⚠️ Site returned HTTP $SITE_RESPONSE - may need DNS propagation time"
            echo "deployment_verified=false" >> $GITHUB_ENV
            echo "site_clean=unknown" >> $GITHUB_ENV
          fi
      
      # Create a detailed deployment summary
      - name: Add deployment summary with diagnostics
        if: always()
        run: |
          echo "# 📊 cPanel Deployment Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://www.snakkaz.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # .htaccess upload status
          if [[ "${{ env.htaccess_success }}" == "true" ]]; then
            echo "### ✅ .htaccess File" >> $GITHUB_STEP_SUMMARY
            echo ".htaccess file uploaded successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ .htaccess File" >> $GITHUB_STEP_SUMMARY
            echo ".htaccess file upload failed." >> $GITHUB_STEP_SUMMARY
          fi
          
          # ZIP upload status
          if [[ "${{ env.zip_upload_success }}" == "true" ]]; then
            echo "### ✅ Application ZIP" >> $GITHUB_STEP_SUMMARY
            echo "Application ZIP file uploaded successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Application ZIP" >> $GITHUB_STEP_SUMMARY
            echo "Application ZIP file upload failed." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Extraction execution status
          if [[ "${{ env.extraction_success }}" == "true" ]]; then
            echo "### ✅ Extraction Process" >> $GITHUB_STEP_SUMMARY
            echo "Files extracted successfully via ${{ env.extraction_method }}." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Extraction Process" >> $GITHUB_STEP_SUMMARY
            echo "File extraction failed - manual extraction required." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Site verification status
          if [[ "${{ env.deployment_verified }}" == "true" ]]; then
            echo "### ✅ Site Verification" >> $GITHUB_STEP_SUMMARY
            echo "Site is accessible and returning HTTP 200." >> $GITHUB_STEP_SUMMARY
            
            # Add site cleanliness check
            if [[ "${{ env.site_clean }}" == "true" ]]; then
              echo "### ✅ Clean References Check" >> $GITHUB_STEP_SUMMARY
              echo "No Lovable/GPT Engineer references found in live site." >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ env.site_clean }}" == "false" ]]; then
              echo "### ⚠️ Clean References Check" >> $GITHUB_STEP_SUMMARY
              echo "Warning: Found Lovable/GPT Engineer references in live site." >> $GITHUB_STEP_SUMMARY
            fi
          elif [[ "${{ env.deployment_verified }}" == "false" ]]; then
            echo "### ⚠️ Site Verification" >> $GITHUB_STEP_SUMMARY
            echo "Site verification failed or incomplete - may need time for propagation." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⏳ Site Verification" >> $GITHUB_STEP_SUMMARY
            echo "Site verification skipped (extraction failed)." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Deployment Objectives Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Remove Lovable/GPT Engineer references**: ✅ Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy clean build to production**: $( [[ '${{ env.extraction_success }}' == 'true' ]] && echo '✅ Complete' || echo '❌ Failed' )" >> $GITHUB_STEP_SUMMARY
          echo "- **Verify site accessibility**: $( [[ '${{ env.deployment_verified }}' == 'true' ]] && echo '✅ Complete' || echo '⏳ Pending' )" >> $GITHUB_STEP_SUMMARY
          echo "- **Confirm clean references in production**: $( [[ '${{ env.site_clean }}' == 'true' ]] && echo '✅ Complete' || echo '⏳ Pending' )" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Next Steps" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ env.extraction_success }}" == "true" ]]; then
            echo "1. **Verify Clean References**: Check https://www.snakkaz.com for any remaining cdn.gpteng.co references" >> $GITHUB_STEP_SUMMARY
            echo "2. **Test Site Functionality**: Verify all features work correctly" >> $GITHUB_STEP_SUMMARY
            echo "3. **Monitor Performance**: Check that the site loads without external CDN errors" >> $GITHUB_STEP_SUMMARY
          else
            echo "1. **Complete Manual Extraction**: Follow the manual steps provided above" >> $GITHUB_STEP_SUMMARY
            echo "2. **Verify Deployment**: Check https://www.snakkaz.com after manual extraction" >> $GITHUB_STEP_SUMMARY
            echo "3. **Test Clean References**: Ensure no Lovable/GPT Engineer CDNs remain" >> $GITHUB_STEP_SUMMARY
          fi
