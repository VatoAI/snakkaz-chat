var u=(e=>(e.AES_GCM="AES-GCM",e.RSA_OAEP="RSA-OAEP",e.ECDH="ECDH",e.ECDSA="ECDSA",e))(u||{}),p=(e=>(e.ENCRYPT="encrypt",e.DECRYPT="decrypt",e.SIGN="sign",e.VERIFY="verify",e.DERIVE_KEY="deriveKey",e.DERIVE_BITS="deriveBits",e.WRAP_KEY="wrapKey",e.UNWRAP_KEY="unwrapKey",e))(p||{});const y=e=>new TextEncoder().encode(e),f=e=>new TextDecoder().decode(e),c=e=>{const r=new Uint8Array(e);let t="";for(let n=0;n<r.byteLength;n++)t+=String.fromCharCode(r[n]);return btoa(t)},i=e=>{const r=atob(e),t=new Uint8Array(r.length);for(let n=0;n<r.length;n++)t[n]=r.charCodeAt(n);return t.buffer},A=async(e,r,t,n=!1)=>{try{const a=await window.crypto.subtle.generateKey(t,n,r);return"privateKey"in a?a.privateKey:a}catch(a){throw console.error("Key generation failed:",a),new Error(`Failed to generate key: ${a instanceof Error?a.message:"Unknown error"}`)}},E=async(e=256,r=!1)=>A("AES-GCM",["encrypt","decrypt"],{name:"AES-GCM",length:e},r),m=async(e,r,t)=>{const n=t||window.crypto.getRandomValues(new Uint8Array(12)),a=typeof e=="string"?y(e):e;return{encryptedData:await window.crypto.subtle.encrypt({name:"AES-GCM",iv:n},r,a),iv:n}},g=async(e,r,t)=>await window.crypto.subtle.decrypt({name:"AES-GCM",iv:t},r,e),l=async e=>await window.crypto.subtle.exportKey("jwk",e),C=async(e,r,t,n=!1)=>{const a=S(r,e);return await window.crypto.subtle.importKey("jwk",e,a,n,t)},S=(e,r)=>{switch(e){case"AES-GCM":return{name:e};case"RSA-OAEP":return{name:e,hash:{name:"SHA-256"}};case"ECDH":return{name:e,namedCurve:r.crv||"P-256"};case"ECDSA":return{name:e,namedCurve:r.crv||"P-256"};default:throw new Error(`Unsupported key type: ${e}`)}},D=async(e,r,t=1e5,n=["encrypt","decrypt"],a=!1)=>{const o=new TextEncoder,s=await window.crypto.subtle.importKey("raw",o.encode(e),"PBKDF2",!1,["deriveBits","deriveKey"]);return await window.crypto.subtle.deriveKey({name:"PBKDF2",salt:r instanceof Uint8Array?r:new Uint8Array(r),iterations:t,hash:"SHA-256"},s,{name:"AES-GCM",length:256},a,n)},h=(e=32)=>{const r=new Uint8Array(e);return window.crypto.getRandomValues(r),Array.from(r).map(t=>t.toString(16).padStart(2,"0")).join("")},K=(e=16)=>{const r=new Uint8Array(e);return window.crypto.getRandomValues(r),r},b=async(e,r,t="high")=>{const n=`${e}-${h(8)}-${Date.now()}`,o=await E(t==="standard"?128:256,!0),s=await l(o),d=JSON.stringify(s),w={keyId:n,encryptedKey:d,version:1,algorithm:"AES-GCM",createdAt:Date.now(),createdBy:r};return{key:o,groupKey:w}},B=async(e,r)=>{const t=y(e),{encryptedData:n,iv:a}=await m(t,r);return{encryptedData:c(n),iv:c(a)}},G=async(e,r,t)=>{const n=i(e),a=i(r),o=await g(n,t,a);return f(o)};export{p as K,c as a,i as b,g as c,D as d,m as e,f,K as g,h,l as i,u as j,C as k,E as l,b as m,B as n,G as o,y as s};
