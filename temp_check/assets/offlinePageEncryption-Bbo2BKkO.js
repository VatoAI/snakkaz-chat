const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-DqZGoT8B.js","assets/vendor-ui-DJT7aDMV.js","assets/vendor-react-CkjGjP8g.js","assets/vendor-supabase-0rZ8WFOd.js","assets/vendor-utils-BiRAyoyP.js","assets/index-GRqizV24.css"])))=>i.map(i=>d[i]);
import{_ as f}from"./vendor-supabase-0rZ8WFOd.js";import"./vendor-react-CkjGjP8g.js";const p=async e=>{try{return await window.crypto.subtle.importKey("jwk",JSON.parse(e),{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}catch(t){throw console.error("Group key import failed:",t),new Error("Failed to import group encryption key")}},u=e=>new TextEncoder().encode(e).buffer,g=e=>new TextDecoder().decode(new Uint8Array(e)),y=e=>{const r=new Uint8Array(e).reduce((o,n)=>o+String.fromCharCode(n),"");return btoa(r)},l=e=>{const t=atob(e),r=new Uint8Array(t.length);for(let o=0;o<t.length;o++)r[o]=t.charCodeAt(o);return r.buffer},h=async(e,t)=>{try{const r=await p(t),o=JSON.stringify(e),n=window.crypto.getRandomValues(new Uint8Array(12)),a=await window.crypto.subtle.encrypt({name:"AES-GCM",iv:n},r,u(o)),c={encryptedContent:y(a),iv:y(n)};return JSON.stringify(c)}catch(r){throw console.error("Whole page encryption failed:",r),new Error("Kunne ikke kryptere hele siden")}},m=async(e,t)=>{try{const{encryptedContent:r,iv:o}=JSON.parse(e),n=await p(t),a=l(r),c=l(o),s=await window.crypto.subtle.decrypt({name:"AES-GCM",iv:new Uint8Array(c)},n,a);return JSON.parse(g(s))}catch(r){throw console.error("Whole page decryption failed:",r),new Error("Kunne ikke dekryptere siden")}},k=async()=>{try{const e=await window.crypto.subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),t=await window.crypto.subtle.exportKey("jwk",e),r=JSON.stringify(t),o=Array.from(window.crypto.getRandomValues(new Uint8Array(16)),n=>n.toString(16).padStart(2,"0")).join("");return{key:r,keyId:o}}catch(e){throw console.error("Group key generation failed:",e),new Error("Kunne ikke generere gruppenÃ¸kkel")}},w=e=>{try{const t=window.localStorage.getItem(e);return t?JSON.parse(t):null}catch(t){return console.error(`Error getting localStorage item ${e}:`,t),null}},E=(e,t)=>{try{return window.localStorage.setItem(e,JSON.stringify(t)),!0}catch(r){return console.error(`Error setting localStorage item ${e}:`,r),!1}},i="snakkaz_offline_encryption_keys";let d={};try{f(()=>import("./index-DqZGoT8B.js").then(e=>e.k),__vite__mapDeps([0,1,2,3,4,5])).then(e=>{d=e.environment}).catch(()=>{console.warn("Could not load environment config, using defaults"),d={supabase:{customDomain:"www.snakkaz.com"},app:{baseUrl:"https://www.snakkaz.com"}}})}catch(e){console.warn("Error importing environment config:",e)}const S=e=>{let t=[],r={};try{const o=JSON.parse(e.content);o&&typeof o=="object"&&(t=o.messages||[],r=o.settings||{})}catch{console.debug("Could not parse page data as JSON, using defaults")}return{content:e.content,metadata:e.metadata,messages:t,settings:r}},b=async(e,t,r,o="P2P_E2EE")=>{try{const n=await w(i)||[],a={keyId:e,key:t,pageId:r,timestamp:Date.now(),securityLevel:o,domain:window.location.hostname},c=n.filter(s=>s.pageId!==r);c.push(a),await E(i,c)}catch(n){throw console.error("Failed to store offline key:",n),new Error("Could not store encryption key for offline use")}},O=async e=>{try{return(await w(i)||[]).find(r=>r.pageId===e)||null}catch(t){return console.error("Failed to retrieve offline key:",t),null}},A=async(e,t)=>{try{const{key:r,keyId:o}=await k(),n=S(t),a=await h(n,r);return await b(o,r,e),{encryptedContent:a,keyId:o,securityLevel:"P2P_E2EE",isOfflineReady:!0,timestamp:Date.now(),version:"1.0"}}catch(r){throw console.error("Failed to encrypt page for offline use:",r),new Error("Could not encrypt the page for offline use")}},_=async(e,t)=>{try{const r=await O(e);if(!r)throw new Error("Encryption key not found for this page");if(r.keyId!==t.keyId)throw new Error("Encryption key mismatch");return await m(t.encryptedContent,r.key)}catch(r){throw console.error("Failed to decrypt offline page:",r instanceof Error?r.message:"Unknown error"),new Error("Could not decrypt the page")}};export{_ as decryptOfflinePage,A as encryptPageForOffline,O as getOfflineKey,b as storeOfflineKey};
