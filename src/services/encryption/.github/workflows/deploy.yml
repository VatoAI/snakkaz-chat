name: Deploy to Snakkaz.com

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build with CSP
      run: npm run build:csp
      
    - name: Verify CSP implementation
      run: |
        echo "Verifying Content Security Policy implementation..."
        if grep -q "Content-Security-Policy" dist/index.html; then
          echo "✅ CSP meta tag found in index.html"
        else
          echo "❌ CSP meta tag not found in index.html"
          exit 1
        fi
        
        # Check for required domains in CSP
        CSP_CONTENT=$(grep -oP 'Content-Security-Policy" content="\K[^"]+' dist/index.html)
        REQUIRED_DOMAINS=("snakkaz.com" "cloudflareinsights.com" "supabase.co" "cdn.gpteng.co")
        
        for domain in "${REQUIRED_DOMAINS[@]}"; do
          if echo "$CSP_CONTENT" | grep -q "$domain"; then
            echo "✅ CSP includes required domain: $domain"
          else
            echo "❌ CSP missing required domain: $domain"
            exit 1
          fi
        done
        
        echo "✅ CSP verification passed"
      
    - name: Deploy to hosting
      run: |
        echo "Deploying to Snakkaz.com..."
        
        # Configure Cloudflare settings
        echo "Configuring Cloudflare settings..."
        
        # Deploy files with CSP
        echo "Deploying files with Content Security Policy..."
        
        # Execute post-deployment CSP check
        echo "Running post-deployment CSP check..."
        node ./src/services/encryption/security-check.cjs
        
        # Verify deployment
        echo "Verifying deployment..."
        
        echo "Deployment complete!"
      
    - name: Cloudflare Cache Purge
      env:
        CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      if: env.CF_API_TOKEN != '' && env.CF_ZONE_ID != ''
      run: |
        echo "Purging Cloudflare cache..."
        curl -X POST "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/purge_cache" \
          -H "Authorization: Bearer $CF_API_TOKEN" \
          -H "Content-Type: application/json" \
          --data '{"purge_everything":true}'
          
    - name: Verify Cloudflare DNS
      env:
        CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      if: env.CF_API_TOKEN != '' && env.CF_ZONE_ID != ''
      run: |
        echo "Verifying Cloudflare DNS settings..."
        curl -X GET "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records" \
          -H "Authorization: Bearer $CF_API_TOKEN" \
          -H "Content-Type: application/json" | jq '.result[] | select(.name | contains("snakkaz.com"))'
    
    - name: Send deployment notification
      run: |
        echo "Deployment to Snakkaz.com completed successfully!"
